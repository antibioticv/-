import re
import time
import string
import random
def cut_text(text,lenth):  #数据按间距分组划分iv向量
    textArr = re.findall('.{'+str(lenth)+'}', text)
    textArr.append(text[(len(textArr)*lenth):])
    return textArr
def zy(n,k):        #循环左移k位,共32比特
    k=k%32
    b=str(bin(n))
    b=b.split('0b')[1]
    b=(32-len(b))*'0'+b
    return int(b[k:]+b[:k],2)
def s2m2b(s):               #字符串s 转化为二进制字符串m & 数据m填充,分组b[i]
    r = ""
    x = ""
    for i in s:
        l = 8 - len((x + bin(ord(i))).split('0b')[1]) % 8
        r = r + l * '0' + (x + bin(ord(i))).split('0b')[1]
    k=512-(64+(len(r)+1))%512
    out=r+'1'+k*'0'
    length=bin(len(r)).split('0b')[1]
    t=64-len(length)
    out=out+t*'0'+length
    out=cut_text(out,512)
    return out
def T(j):
    if j<16:
        T =int('0x79cc4519',16)
    else:
        T =int('0x7a879d8a',16)
    return T
def FF(x,y,z,j):  #布尔函数1，式中X,Y,Z 为字。
    if j<=15:
        return x^y^z
    else:
        return (x&y)|(y&z)|(x&z)
def GG(x,y,z,j):    #布尔函数2，式中X,Y,Z 为字。
    if j<=15:
        return x^y^z
    else:
        return (x&y)|(~x&z)
def p0(x):  #置换函数1，式中X为字
    return x^(zy(x,9))^(zy(x,17))
def p1(x):  #置换函数2，式中X为字
    return x^(zy(x,15))^(zy(x,23))
def cf(v,b):
    w = cut_text(b, 32)
    w2 = []
    for j in range(0,16):
        w[j]=int(w[j],2)
    del w[16]
    for j in range(16,68):
        x = p1(w[j - 16] ^ w[j - 9] ^ zy(w[j - 3] ,15)) ^ zy(w[j - 13] ,7) ^ w[j - 6]
        w.append(x)
    for j in range(0,64):
        x = w[j] ^ w[j + 4]
        w2.append(x)
    A=cut_text(v,8)
    for i in range(0,8):
        A[i]=int(A[i],16)
    for j in range(64):
        ss1=zy((zy(A[0],12)+A[4]+zy(T(j),j))%(2**32),7)%(2**32)
        ss2=(ss1^zy(A[0],12))%(2**32)
        tt1=(FF(A[0],A[1],A[2],j)+A[3]+ss2+w2[j])%(2**32)
        tt2=(GG(A[4],A[5],A[6],j)+A[7]+ss1+w[j])%(2**32)
        A[3]=A[2]
        
        A[2]=zy(A[1],9)
        A[1]=A[0]
        A[0]=tt1
        A[7]=A[6]
        A[6]=zy(A[5],19)
        A[5]=A[4]
        A[4]=p0(tt2)
    a=''
    for i in range(8):
        A[i]=str(hex(A[i])).split('0x')[1]
        k=8-len(A[i])
        a=a+k*'0'+A[i]
    v1=int(a,16)^int(v,16)
    v1=hex(v1).split('0x')[1]
    if len(v1)<64:
        v1="0"*(64-len(v1))+str(v1)
    return v1
def G_hash(P):# 对明文 hash
    iv = '7380166f4914b2b9172442d7da8a0600a96f30bc163138aae38dee4db0fb0e4e'
    B = s2m2b(P)
    for b in B:
        if b != '':
            iv = cf(iv, b)
    return iv
tree=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]#生成Merkle Tree
for i in range(2**20):
    tree[0].append(str(i))
for j in range(21):
    if j==0:
        for i in range(2**20):
            tree[j+1].append(G_hash('00'+tree[j][i]))
    else:
        for i in range(0,2**(21-j),2):
            tree[j+1].append(G_hash('01'+tree[j][i]+tree[j][i+1]))
x1=int(input("请输入要判断的数:"))
if x1<2**20 and x1>=0:
    y1=G_hash('00'+str(x1))
    if x1%2==0:
        x2=x1+1
    else:
        x2=x1-1
    y2=G_hash('00'+str(x2))
    z=[]
    for i in range(1,20):
        z.append(int(x/(2**i)))
    if x1%2==0:
        y=G_hash('01'+y1+y2)
    else:
        y=G_hash('01'+y2+y1)
    for j in range(2,21):
       if z[j-2]%2==0:
           temp=z[j-2]+1
           y=G_hash('01'+y+tree[j][temp])
       else:
           temp=z[j-2]-1
           y=G_hash('01'+tree[j][temp]+y)
    if tree[21][0]==y:
        print("您要检查的数据在Merkle Tree中")
    else:
        print("您要检查的数据不在Merkle Tree中")
else:
        print("您要检查的数据不在Merkle Tree中")            


